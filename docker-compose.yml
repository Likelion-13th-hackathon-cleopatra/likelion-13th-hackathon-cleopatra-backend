# version: '3.8' 불필요: 최신 Docker Desktop이나 docker compose CLI는 Compose Specification (스펙) 를 따릅

name: cleopatra # 프로젝트명 고정(볼륨/네트워크 접두사 고정)

services:
  ai:
    image: dddododo/ai-report2:latest
    container_name: dddododo
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./outputs:/app/outputs
    restart: unless-stopped
    networks:
      - my-network

  mysql:
    image: mysql:8.0
    container_name: cleopatra-mysql
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - my-network
    deploy:
      resources:
        limits:
          memory: 800M    # MySQL 메모리 최대 800MB 제한
        reservations:
          memory: 400M    # MySQL 최소 예약 메모리 400MB
    cpu_shares: 512     # CPU 우선순위 (기본 1024), 512는 절반 정도 할당

  mongo:
    image: mongo:7.0
    container_name: cleopatra-mongo
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL","mongosh --quiet --eval 'db.adminCommand({ping:1}).ok' | grep 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    cpu_shares: 256

  application:
    image: kimgt2828/cleopatra-server:latest
    #build: .
    container_name: cleopatra-application
    env_file:
      - .env
    depends_on:
      mysql:
        condition: service_healthy
      mongo:
        condition: service_healthy
    restart: on-failure   # 선택(권장): DB 준비되면 자동 재시작
    # ports, networks 등 기존 그대로
    ports:
      - "8080:8080"
    networks:
      - my-network

  nginx:
    image: nginx:latest
    container_name: cleopatra-nginx
    restart: always
    ports:
      - "80:80"  # HTTP 요청을 80번 포트에서 받음
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./certbot/conf:/etc/letsencrypt:ro
    depends_on:
      - application
    networks:
      - my-network

  certbot:
    image: certbot/certbot:latest
    container_name: cleopatra-certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt


networks:
  my-network:
    driver: bridge

volumes:
  mongo_data:
    name: cleopatra-mongo-data   # 명시적 이름으로 CI 경로 변화와 무관
  mysql_data:
    name: cleopatra-mysql-data