plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.likelion'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // Core
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // h2 db: 테스트용
    testRuntimeOnly 'com.h2database:h2'

    // Mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Mongodb
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'      // Mongo 동기

    // Webclient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // SpringDoc - Swagger UI
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0")

    // Validatoin
    implementation "org.springframework.boot:spring-boot-starter-validation"

    // Crawling
    implementation "com.microsoft.playwright:playwright:1.46.0"

    // AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop'
}

tasks.named('test') {
    useJUnitPlatform()
}

/** 파라미터 이름 보존(AOP에서 메서드 파라미터명 로깅용) */
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

/** Playwright 브라우저 미리 설치 (권장: Docker 빌드 단계에서 실행) */
tasks.register('playwrightInstall') {
    doLast {
        com.microsoft.playwright.CLI.main(['install'] as String[])
    }
}
